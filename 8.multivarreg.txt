import numpy as np
np.set_printoptions(suppress=True)
def multiply(a, b):
    if a.shape[1] != b.shape[0]:
        print("Cannot multiply the matrices!!")
        return None
    c = np.zeros([a.shape[0],b.shape[1]])
    for i in range(a.shape[0]):
        for j in range(b.shape[1]):
            for k in range(b.shape[0]):
                c[i, j] += a[i, k] * b [k, j]
    return c
def transpose(mat):
    result = np.zeros((mat.shape[1],mat.shape[0]))
    for i in range(mat.shape[0]):
   # iterate through columns
       for j in range(mat.shape[1]):
           result[j, i] = mat[i, j]
    return result
def recursiveDet(mat):
    if mat.shape == (2,2):
        return mat[0,0]*mat[1,1] - mat[0,1]*mat[1,0]
    total = 0
    for c in range(mat.shape[0]):
        matCopy = np.copy(mat)
        matCopy = matCopy[1:]
        matCopy = np.delete(matCopy, c, 1)
        sign = (-1)**(c%2)
        sub_det = recursiveDet(matCopy)
        total += sign*mat[0, c]*sub_det
    return total
def myInv(mat):
    det = recursiveDet(mat)
    adj = np.zeros(mat.shape, dtype=float)
    for r in range(mat.shape[0]):
        matC = np.copy(mat)
        matC = np.delete(matC, r, 0)
        for c in range(matC.shape[1]):
            matC2 = np.delete(matC, c, 1)
            adj[r, c] = ((-1)**(c%2)) * recursiveDet(matC2)
    adj = adj/det
    return adj
p1 = int(input("Enter the number of y variables: "))
p2 = int(input("Enter the number of x variables: "))
n = int(input("Enter the number of observations: "))

# y = np.array([[10, 100], [12, 110], [11, 105], [9, 94], [9, 95], [10, 99], [11, 104], [12, 108], [11, 105], [10, 98], [11, 103], [12, 110]])
# x = np.array([[1, 9, 62, 1.0], [1, 8, 58, 1.3], [1, 7, 64, 1.2], [1, 14, 60, 0.8], [1, 12, 63, 0.8], [1, 10, 57, 0.9], [1, 7, 55, 1.0], [1, 4, 56, 1.2], [1, 6, 59, 1.1], [1, 5, 61, 1.0], [1, 7, 57, 1.2], [1, 6, 60, 1.2]])
y = np.array([[float(j)] for j in input(f"Enter values of y1: ").split()])
for i in range(1, p1):
    yvar = np.array([[float(j)] for j in input(f"Enter values of y{i+1}: ").split()])
    y = np.hstack((y,yvar))
x = np.array([[1] for i in range(n)])
for i in range(p2):
    xvar = np.array([[float(j)] for j in input(f"Enter values of x{i+1}: ").split()])
    x = np.hstack((x, xvar))

xt = transpose(x)
xtx = multiply(xt, x)
xtxi = myInv(xtx)
xty = multiply(xt, y)
beta = multiply(xtxi, xty)
print(beta)
print(f"Fitting for profit: y = {round(beta[0,0],3)} + {round(beta[1,0],3)}x1 + {round(beta[2,0],3)}x2 + {round(beta[3,0], 3)}x3")
print(f"Fitting for sales: y = {round(beta[0,1], 3)} + {round(beta[1,1], 3)}x1 + {round(beta[2,1], 3)}x2 + {round(beta[3,1], 3)}x3")

Enter the level of significance: 0.05
Enter the number of treatments: 3
Enter the values of treatments: 
Treatment 1: 13 10 8 11 8
Treatment 2: 13 11 14 14
Treatment 3: 4 1 3 4 2 4
Fcal>Ftable (50.625>3.8853) We reject H0 and accept H1, i.e., there is no homogenity among the means
Enter the level of significance: 0.05
Enter the number of treatments: 4
Enter the number of blocks: 5
Enter the values of treatments: 
Treatment 1: 75 73 59 69 84
Treatment 2: 83 72 56 70 92
Treatment 3: 86 61 53 72 88
Treatment 4: 73 67 62 79 95
Inference related to treatments: 
Ftr < Ftab (1.9749708963913033 < 3.4903), we accept H0, i.e.,there is no significant different among the treatments
Inference related to blocks
Fb >= Ftab (20.57206012378406 >= 3.2592), we reject H0 and accept H1,i.e.,there is significant different among the blocks
Enter number of variables: 3
Enter number of observations: 7
Enter values of y: 11 11 8 2 5 5 4
Enter values of x1: -5 -4 -1 2 2 3 3
Enter values of x2: 5 4 1 -3 -2 -2 -3
Goodness of fit by coeffecient of determination:
The model is a good fit

ANOVA:
We reject H0, i.e., there is atleast one regression parameter which is influencing the model
Enter the number of y variables: 2
Enter the number of x variables: 3
Enter the number of observations: 12
Enter values of y1: 10 12 11 9 9 10 11 12 11 10 11 12
Enter values of y2: 100 110 105 94 95 99 104 108 105 98 103 110
Enter values of x1: 9 8 7 14 12 10 7 4 6 5 7 6
Enter values of x2: 62 58 64 60 63 57 55 56 59 61 57 60
Enter values of x3: 1.0 1.3 1.2 0.8 0.8 0.9 1.0 1.2 1.1 1.0 1.2 1.2
[[ 10.89699524  91.09719893]
 [  0.04494029   0.06400723]
 [ -0.08770359  -0.29437367]
 [ -5.03545972 -27.83530349]]
Fitting for profit: y = 10.897 + 0.045x1 + -0.088x2 + -5.035x3
Fitting for sales: y = 91.097 + 0.064x1 + -0.294x2 + -27.835x3